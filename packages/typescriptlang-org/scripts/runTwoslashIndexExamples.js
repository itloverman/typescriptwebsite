// @ts-check

// Converts twoslash code samples for the front page into react components
/** Run with:
     yarn workspace typescriptlang-org compile-index-examples
 */
const remark = require("remark")
const toHAST = require(`mdast-util-to-hast`)
const hastToHTML = require(`hast-util-to-html`)
const { join } = require(`path`)
const { readdirSync, readFileSync, lstatSync, writeFileSync } = require("fs")

const runTwoSlashAcrossDocument = require("gatsby-remark-shiki-twoslash")
  .default

// prettier-ignore
const examplesPath = join(__dirname,"..", "src", "components", "index", "twoslash")

// Loop through all code sames in src/components/index/twoslash and generate HTM
readdirSync(examplesPath, "utf-8").forEach(async path => {
  const name = path.split(".")[0]
  const filePath = join(examplesPath, path)
  if (lstatSync(filePath).isDirectory() || !filePath.endsWith("ts-sample")) {
    return
  }

  const code = readFileSync(filePath, "utf8")
  const markdownAST = remark().parse("```ts twoslash\n" + code + "\n```")
  await runTwoSlashAcrossDocument(
    { markdownAST },
    { theme: require.resolve("../lib/themes/typescript-beta-dark.json") }
  )

  const hAST = toHAST(markdownAST, { allowDangerousHTML: true })
  const html = hastToHTML(hAST, { allowDangerousHTML: true })

  const componentName = name[0].toUpperCase() + name.substring(1)
  const file = `// Auto-generated by yarn workspace typescriptlang-org compile-index-examples
import React from "react"

const innerHTML = \`${html.trim()}\`

export const ${componentName}Example = () => <div dangerouslySetInnerHTML={{ __html: innerHTML }} />
`
  writeFileSync(join(examplesPath, name + ".tsx"), file)
})
