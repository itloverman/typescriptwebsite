// Auto-generated by the twoslash-cli from typeDefinitions.tsx.md
import React from "react"

const innerHTML = `
<pre class="shiki min-dark twoslash lsp" style="background-color: #1f1f1f; color: #b392f0"><div class="language-id">tsx</div><div class='code-container'><code><div class='line'><span style="color: #F97583">import</span><span style="color: #B392F0"> <data-lsp lsp='(alias) function express(): core.Express&#10;(alias) namespace express&#10;import express' >express</data-lsp> </span><span style="color: #F97583">from</span><span style="color: #B392F0"> </span><span style="color: #FFAB70">"express"</span></div><div class='line'><span style="color: #F97583">const</span><span style="color: #B392F0"> </span><span style="color: #79B8FF"><data-lsp lsp='const app: Express' >app</data-lsp></span><span style="color: #B392F0"> </span><span style="color: #F97583">=</span><span style="color: #B392F0"> <data-lsp lsp='(alias) express(): Express&#10;import express' >express</data-lsp>()</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #79B8FF"><data-lsp lsp='const app: Express' >app</data-lsp></span><span style="color: #B392F0">.<data-lsp lsp='(property) Application.get: &lt;ParamsDictionary, any, any, QueryString.ParsedQs>(path: PathParams, ...handlers: RequestHandler&lt;ParamsDictionary, any, any, QueryString.ParsedQs>[]) => Express (+3 overloads)' >get</data-lsp>(</span><span style="color: #FFAB70">"/"</span><span style="color: #B392F0">, </span><span style="color: #F97583">function</span><span style="color: #B392F0"> (<data-lsp lsp='(parameter) req: Request&lt;ParamsDictionary, any, any, QueryString.ParsedQs>' >req</data-lsp>, <data-lsp lsp='(parameter) res: Response&lt;any>' >res</data-lsp>) {</span></div><div class='line'><span style="color: #B392F0">  </span><span style="color: #79B8FF"><data-lsp lsp='(parameter) res: Response&lt;any>' >res</data-lsp></span><span style="color: #B392F0">.<data-lsp lsp='any' >sen</data-lsp></span></div><div class='meta-line'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class='inline-completions'><ul class='dropdown'><li class=''><span><span class='result-found'>sen</span>d<span></li><li class=''><span><span class='result-found'>sen</span>dDate<span></li><li class='deprecated'><span><span class='result-found'>sen</span>dfile<span></li><li class=''><span><span class='result-found'>sen</span>dFile<span></li><li class=''><span><span class='result-found'>sen</span>dStatus<span></li></ul></span></div><div class='line'><span style="color: #B392F0">})</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #79B8FF"><data-lsp lsp='const app: Express' >app</data-lsp></span><span style="color: #B392F0">.<data-lsp lsp='(method) Application.listen(port: number, callback?: ((...args: any[]) => void) | undefined): Server (+5 overloads)' >listen</data-lsp>(</span><span style="color: #F8F8F8">3000</span><span style="color: #B392F0">)</span></div><div class='line'>&nbsp;</div></code></div></pre>
<pre class="shiki typescript-beta-dark twoslash lsp" style="background-color: #00273f; color: #D4D4D4"><div class="language-id">tsx</div><div class='code-container'><code><div class='line'><span style="color: #569CD6">import</span><span style="color: #D4D4D4"> <data-lsp lsp='(alias) function express(): core.Express&#10;(alias) namespace express&#10;import express' >express</data-lsp> </span><span style="color: #569CD6">from</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">"express"</span></div><div class='line'><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> <data-lsp lsp='const app: Express' >app</data-lsp> = <data-lsp lsp='(alias) express(): Express&#10;import express' >express</data-lsp>()</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #D4D4D4"><data-lsp lsp='const app: Express' >app</data-lsp>.<data-lsp lsp='(property) Application.get: &lt;ParamsDictionary, any, any, QueryString.ParsedQs>(path: PathParams, ...handlers: RequestHandler&lt;ParamsDictionary, any, any, QueryString.ParsedQs>[]) => Express (+3 overloads)' >get</data-lsp>(</span><span style="color: #CE9178">"/"</span><span style="color: #D4D4D4">, </span><span style="color: #569CD6">function</span><span style="color: #D4D4D4"> (<data-lsp lsp='(parameter) req: Request&lt;ParamsDictionary, any, any, QueryString.ParsedQs>' >req</data-lsp>, <data-lsp lsp='(parameter) res: Response&lt;any>' >res</data-lsp>) {</span></div><div class='line'><span style="color: #D4D4D4">  <data-lsp lsp='(parameter) res: Response&lt;any>' >res</data-lsp>.<data-lsp lsp='any' >sen</data-lsp></span></div><div class='meta-line'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class='inline-completions'><ul class='dropdown'><li class=''><span><span class='result-found'>sen</span>d<span></li><li class=''><span><span class='result-found'>sen</span>dDate<span></li><li class='deprecated'><span><span class='result-found'>sen</span>dfile<span></li><li class=''><span><span class='result-found'>sen</span>dFile<span></li><li class=''><span><span class='result-found'>sen</span>dStatus<span></li></ul></span></div><div class='line'><span style="color: #D4D4D4">})</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #D4D4D4"><data-lsp lsp='const app: Express' >app</data-lsp>.<data-lsp lsp='(method) Application.listen(port: number, callback?: ((...args: any[]) => void) | undefined): Server (+5 overloads)' >listen</data-lsp>(</span><span style="color: #B5CEA8">3000</span><span style="color: #D4D4D4">)</span></div><div class='line'>&nbsp;</div></code></div></pre>
`

export const Code = () => <div dangerouslySetInnerHTML={{ __html: innerHTML }} />
