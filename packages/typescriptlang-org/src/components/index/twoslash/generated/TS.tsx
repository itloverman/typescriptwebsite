// Auto-generated by the twoslash-cli from TS.ts.md
import React from "react"

const innerHTML = `
<pre class="shiki min-dark twoslash lsp" style="background-color: #1f1f1f; color: #b392f0"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #F97583">function</span><span style="color: #B392F0"> <data-lsp lsp='function compact(arr: string[]): string[]' >compact</data-lsp>(<data-lsp lsp='(parameter) arr: string[]' >arr</data-lsp></span><span style="color: #F97583">:</span><span style="color: #B392F0"> </span><span style="color: #79B8FF">string</span><span style="color: #B392F0">[]) {</span></div><div class='line'><span style="color: #B392F0">  </span><span style="color: #F97583">if</span><span style="color: #B392F0"> (</span><span style="color: #79B8FF"><data-lsp lsp='(parameter) arr: string[]' >arr</data-lsp></span><span style="color: #B392F0">.</span><span style="color: #79B8FF"><data-lsp lsp='(property) Array&lt;string>.length: number' >length</data-lsp></span><span style="color: #B392F0"> </span><span style="color: #F97583">&gt;</span><span style="color: #B392F0"> </span><span style="color: #F8F8F8">10</span><span style="color: #B392F0">) </span><span style="color: #F97583">return</span><span style="color: #B392F0"> </span><span style="color: #79B8FF"><data-lsp lsp='(parameter) arr: string[]' >arr</data-lsp></span><span style="color: #B392F0">.<data-lsp lsp='(method) Array&lt;string>.slice(start?: number | undefined, end?: number | undefined): string[]' >slice</data-lsp>(</span><span style="color: #F8F8F8">0</span><span style="color: #B392F0">, </span><span style="color: #F8F8F8">10</span><span style="color: #B392F0">)</span></div><div class='line'><span style="color: #B392F0">  </span><span style="color: #F97583">return</span><span style="color: #B392F0"> <data-lsp lsp='(parameter) arr: string[]' >arr</data-lsp></span></div><div class='line'><span style="color: #B392F0">}</span></div><div class='line'>&nbsp;</div></code></div></pre>
<pre class="shiki homepage twoslash lsp" style="background-color: #2C6CB2; color: #eeeeee"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #E3EBF3">function</span><span style="color: #EEEEEE"> </span><span style="color: #FFFACD"><data-lsp lsp='function compact(arr: string[]): string[]' >compact</data-lsp></span><span style="color: #EEEEEE">(</span><span style="color: #ECECEC"><data-lsp lsp='(parameter) arr: string[]' >arr</data-lsp></span><span style="color: #F2F1EF">:</span><span style="color: #EEEEEE"> </span><span style="color: #E2D4AF">string</span><span style="color: #EEEEEE">[]) {</span></div><div class='line'><span style="color: #EEEEEE">  </span><span style="color: #F2F1EF">if</span><span style="color: #EEEEEE"> (</span><span style="color: #ECECEC"><data-lsp lsp='(parameter) arr: string[]' >arr</data-lsp></span><span style="color: #EEEEEE">.</span><span style="color: #ECECEC"><data-lsp lsp='(property) Array&lt;string>.length: number' >length</data-lsp></span><span style="color: #EEEEEE"> </span><span style="color: #F2F1EF">&gt;</span><span style="color: #EEEEEE"> </span><span style="color: #E0FFFF">10</span><span style="color: #EEEEEE">) </span><span style="color: #F2F1EF">return</span><span style="color: #EEEEEE"> </span><span style="color: #ECECEC"><data-lsp lsp='(parameter) arr: string[]' >arr</data-lsp></span><span style="color: #EEEEEE">.</span><span style="color: #FFFACD"><data-lsp lsp='(method) Array&lt;string>.slice(start?: number | undefined, end?: number | undefined): string[]' >slice</data-lsp></span><span style="color: #EEEEEE">(</span><span style="color: #E0FFFF">0</span><span style="color: #EEEEEE">, </span><span style="color: #E0FFFF">10</span><span style="color: #EEEEEE">)</span></div><div class='line'><span style="color: #EEEEEE">  </span><span style="color: #F2F1EF">return</span><span style="color: #EEEEEE"> </span><span style="color: #ECECEC"><data-lsp lsp='(parameter) arr: string[]' >arr</data-lsp></span></div><div class='line'><span style="color: #EEEEEE">}</span></div><div class='line'>&nbsp;</div></code></div></pre>
`

export const Code = () => <div dangerouslySetInnerHTML={{ __html: innerHTML }} />
